EDITOR='vim'

var binid2objid = function(bin) {
    return ObjectId(new BinData(4, bin).hex())
}

var find_avatar = function(bin_id, show_key) {
    show_key = show_key || {}
    return db.Avatar.findOne({'_id': binid2objid(bin_id)}, show_key)
}

// http://stackoverflow.com/a/3058974/162228
var debase64 = function(s) {
    var e={},i,k,v=[],r='',w=String.fromCharCode;
    var n=[[65,91],[97,123],[48,58],[43,44],[47,48]];

    for(z in n){for(i=n[z][0];i<n[z][1];i++){v.push(w(i));}}
    for(i=0;i<64;i++){e[v[i]]=i;}

    for(i=0;i<s.length;i+=72){
        var b=0,c,x,l=0,o=s.substring(i,i+72);
        for(x=0;x<o.length;x++){
            c=e[o.charAt(x)];b=(b<<6)+c;l+=6;
            while(l>=8){r+=w((b>>>(l-=8))%256);}
        }
    }
    return r;
}

var Base64={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(e){var t="";var n,r,i,s,o,u,a;var f=0;e=Base64._utf8_encode(e);while(f<e.length){n=e.charCodeAt(f++);r=e.charCodeAt(f++);i=e.charCodeAt(f++);s=n>>2;o=(n&3)<<4|r>>4;u=(r&15)<<2|i>>6;a=i&63;if(isNaN(r)){u=a=64}else if(isNaN(i)){a=64}t=t+this._keyStr.charAt(s)+this._keyStr.charAt(o)+this._keyStr.charAt(u)+this._keyStr.charAt(a)}return t},decode:function(e){var t="";var n,r,i;var s,o,u,a;var f=0;e=e.replace(/[^A-Za-z0-9+/=]/g,"");while(f<e.length){s=this._keyStr.indexOf(e.charAt(f++));o=this._keyStr.indexOf(e.charAt(f++));u=this._keyStr.indexOf(e.charAt(f++));a=this._keyStr.indexOf(e.charAt(f++));n=s<<2|o>>4;r=(o&15)<<4|u>>2;i=(u&3)<<6|a;t=t+String.fromCharCode(n);if(u!=64){t=t+String.fromCharCode(r)}if(a!=64){t=t+String.fromCharCode(i)}}t=Base64._utf8_decode(t);return t},_utf8_encode:function(e){e=e.replace(/rn/g,"n");var t="";for(var n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r)}else if(r>127&&r<2048){t+=String.fromCharCode(r>>6|192);t+=String.fromCharCode(r&63|128)}else{t+=String.fromCharCode(r>>12|224);t+=String.fromCharCode(r>>6&63|128);t+=String.fromCharCode(r&63|128)}}return t},_utf8_decode:function(e){var t="";var n=0;var r=c1=c2=0;while(n<e.length){r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r);n++}else if(r>191&&r<224){c2=e.charCodeAt(n+1);t+=String.fromCharCode((r&31)<<6|c2&63);n+=2}else{c2=e.charCodeAt(n+1);c3=e.charCodeAt(n+2);t+=String.fromCharCode((r&15)<<12|(c2&63)<<6|c3&63);n+=3}}return t}}

// convert string to bin data
var s2b = function(s) {
	return new BinData(0, Base64.encode(s));
}

// recersive convert string value into base64 encoded BinData
var convertQueryStrToBinRecur = function(query) {
    for(var key in query) {
        var item = query[key];
        if(typeof(item) === 'string') {
            query[key] = s2b(item);
        } else if (typeof(item) === 'object') {
            arguments.callee(item);
        }
    }
    return query
}

var find_attr = function(query, field, col_name, find_one) {
    if(query === undefined) query = {};
    if(col_name === undefined) col_name = 'Avatar';
    if(find_one === undefined) find_one = true;
    if(field === undefined) field = {};
 
    // convert already base64 converted _id
    var id_query = query['_id'];
    if(typeof(id_query) === 'string' && id_query.length == 16) {
        query['_id'] = binid2objid(id_query);
    }

    query = convertQueryStrToBinRecur(query);
    if(find_one) {
        return db[col_name].findOne(query, field);
    } else {
        return db[col_name].find(query, field);
    }
}

var prompt = function() {
    var res = (new Date().toLocaleString()) + ':';
    if (typeof db == 'undefined') {
        return res + '(nodb)> ';
    }
    return res + db + '> ';
}
