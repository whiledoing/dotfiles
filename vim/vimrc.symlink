" env {{{1
set nocompatible

function! MySys()
    if(has("win32") || has("win95") || has("win64") || has("win16"))
        return "windows"
    else
        return "linux"
    endif
endfunction

if MySys() == "windows"
    source $VIMRUNTIME/mswin.vim
    behave mswin
endif

if MySys() == "windows"
    let $VIMFILES = $VIM.'\vimfiles'
    let $V = $HOME.'/.vimrc'
else
    let $VIMFILES = $HOME.'/.vim'
    let $V = $HOME.'/.vimrc'
endif
" }}}
" conf {{{1
" vim conf {{{2
" With a map leader it's possible to do extra key combinations
let mapleader = ","
let g:mapleader = ","

" Turn backup off, since most stuff is in SVN, git anyway...
set nobackup
set nowb
set noswapfile

" Persistent undo
try
    if MySys() == "windows"
        set undodir=$VIM.'\vim_undo_dir'
    else
        set undodir=~/.vim_runtime/undodir
    endif
    set undofile
    set undolevel=1000
catch
endtry

" Fold method
set fdm=marker

" Sets how many lines of history VIM has to remember
set history=1000

" Enable filetype plugin
filetype plugin indent on

" Set to auto read when a file is changed from the outside
if exists("&autoread")
    set autoread
endif

" 显示状态栏
set ruler

" 允许使用空格
set backspace=indent,eol,start whichwrap+=<,>,[,]

" Set 7 lines to the curors - when moving vertical..
set so=7

" Turn on WiLd menu
set wildmenu

" The commandbar is 2 high
set cmdheight=2

" Show line number
set nu

" Do not redraw, when running macros.. lazyredraw
set lz

" Change buffer - without saving
set hid

" Search
set ignorecase
set incsearch
set hlsearch

" Set magic on
set magic

" No sound on errors.
set noerrorbells
set novisualbell
set t_vb=

" Show matching bracet
set showmatch

" How many tenths of a second to blink
set mat=4

" Session options
set sessionoptions-=curdir
set sessionoptions+=sesdir
set sessionoptions+=resize
set sessionoptions+=winpos

" auto change current directory
" set autochdir

" set tags file
set tags=tags
set tags+=./tags

" 交换 g<c-]> 和 <c-]>
nnoremap <c-]> g<c-]>
vnoremap <c-]> g<c-]>
nnoremap g<c-]> <c-]>
vnoremap g<c-]> <c-]>

" if exists('$TMUX')
    " set term=screen-256color
" endif

" [copy-config-from-blog](http://www.wklken.me/posts/2016/02/03/some-vim-configs.html)
" http://stackoverflow.com/questions/13194428/is-better-way-to-zoom-windows-in-vim-than-zoomwin
" Zoom / Restore window.
function! s:ZoomToggle() abort
    if exists('t:zoomed') && t:zoomed
        execute t:zoom_winrestcmd
        let t:zoomed = 0
    else
        let t:zoom_winrestcmd = winrestcmd()
        resize
        vertical resize
        let t:zoomed = 1
    endif
endfunction
command! ZoomToggle call s:ZoomToggle()
nnoremap <silent> <Leader>z :ZoomToggle<CR>

" Map ; to : and save a million keystrokes 用于快速进入命令行
nnoremap ; :

" Go to home and end using capitalized directions
noremap H ^
noremap L $

" 命令行模式增强，ctrl - a到行首， -e 到行尾
cnoremap <C-a> <Home>
cnoremap <C-e> <End>

" Keep search pattern at the center of the screen.
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz

" 去掉搜索高亮
noremap <silent><leader>/ :nohls<CR>

" for # indent, python文件中输入新行时#号注释不切回行首
autocmd BufNewFile,BufRead *.py inoremap # X<c-h>#

" y$ -> Y Make Y behave like other capitals
map Y y$

" w!! to sudo & write a file
" [quick method](http://stackoverflow.com/questions/2600783/how-does-the-vim-write-with-sudo-trick-work)
cmap w!! w !sudo tee >/dev/null %

" remap U to <C-r> for easier redo
nnoremap U <C-r>

" 设置可以高亮的关键字
if has("autocmd")
  " Highlight TODO, FIXME, NOTE, etc.
  if v:version > 701
    autocmd Syntax * call matchadd('Todo',  '\W\zs\(TODO\|FIXME\|CHANGED\|DONE\|XXX\|BUG\|HACK\)')
    autocmd Syntax * call matchadd('Debug', '\W\zs\(NOTE\|INFO\|IDEA\|NOTICE\)')
  endif
endif

" 启动的时候不显示那个援助索马里儿童的提示
set shortmess=atI

" 设置 退出vim后，内容显示在终端屏幕, 可以用于查看和复制, 不需要可以去掉
" 好处：误删什么的，如果以前屏幕打开，可以找回
set t_ti= t_te=
" }}}
"  operate vimrc {{{2
"Make Open vimrc file in a new tab window
function! SwitchToBuf(filename)
    " find in current tab
    let bufwinnr = bufwinnr(a:filename)
    if bufwinnr != -1
        exec bufwinnr . "wincmd w"
        return
    else
        " find in each tab
        tabfirst
        let tab = 1
        while tab <= tabpagenr("$")
            let bufwinnr = bufwinnr(a:filename)
            if bufwinnr != -1
                exec "normal " . tab . "gt"
                exec bufwinnr . "wincmd w"
                return
            endif
            tabnext
            let tab = tab + 1
        endwhile
        " not exist, new tab
        exec "tabnew " . a:filename
    endif
endfunction

"Fast reloading of the .vimrc
map <silent> <leader>ss :source $V<cr>

"Fast editing of .vimrc
map <silent> <leader>ee :call SwitchToBuf($V)<cr>

if MySys() == "windows"
    " When _vimrc is edited, reload it
    autocmd! bufwritepost vimrc source $V
else
    "When .vimrc is edited, reload it
    autocmd! bufwritepost .vimrc source ~/.vimrc
end
" }}}
" mac related {{{2

" [switch tabs in macvim](http://superuser.com/questions/382060/shortcut-to-switch-tabs-in-macvim)
if has("gui_macvim")
    " Press Ctrl-Tab to switch between open tabs (like browser tabs) to
    " the right side. Ctrl-Shift-Tab goes the other way.
    noremap <C-Tab> :tabnext<CR>
    noremap <C-S-Tab> :tabprev<CR>

    " Switch to specific tab numbers with Command-number
    noremap <D-1> :tabn 1<CR>
    noremap <D-2> :tabn 2<CR>
    noremap <D-3> :tabn 3<CR>
    noremap <D-4> :tabn 4<CR>
    noremap <D-5> :tabn 5<CR>
    noremap <D-6> :tabn 6<CR>
    noremap <D-7> :tabn 7<CR>
    noremap <D-8> :tabn 8<CR>
    noremap <D-9> :tabn 9<CR>

    " Command-0 goes to the last tab
    noremap <D-0> :tablast<CR>
endif

" get error
if has("gui_macvim")
    noremap <D-j> :cn<CR>
    noremap <D-k> :cp<CR>
endif
" }}}
" style {{{2
" enable syntax
syntax on

" Just Use Utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set encoding=utf-8
set langmenu=zh_CN.UTF-8
set termencoding=utf-8

if MySys() == "windows"
    source $VIMRUNTIME/delmenu.vim
    source $VIMRUNTIME/menu.vim
    language messages zh_CN.utf-8
endif

" gui option
if has("gui_running")
    set guioptions-=m
    set guioptions-=T
    set guioptions-=l
    set guioptions-=L
    set guioptions-=r
    set guioptions-=R

    " highlight current line
    if exists("&cursorline")
        set cursorline
    endif
endif

" fonts
" set guifont=Microsoft_YaHei_Mono:h10:cANSI
" set guifont=Microsoft_YaHei_Mono:h11:cANSI
" set guifont=Inconsolata:h13
" set guifont=Monaco:h11
set guifont=Monaco\ for\ Powerline:h11

" set gvim startup size, remember to put this after set font
if has("gui_running")
    " set the default vim size
    " winpos 0 0

    " set max size
    set lines=99999 columns=99999
    autocmd guienter * let &columns = 999 | let &columns = &columns/2
    autocmd guienter * set lines=9999 columns=9999

    " set only on macvim (ref)[http://stackoverflow.com/questions/2842078/how-do-i-detect-os-x-in-my-vimrc-file-so-certain-configurations-will-only-appl]
    " if has("gui_macvim")
        " set fullscreen
    " endif

    " automatically call this method after loading vimrc
    " autocmd vimenter * fullscreen
endif
" }}}
" statusline {{{2
set laststatus=2

" Format the statusline
set statusline=
set statusline +=%4*\ %<%F%*            " full path
set statusline +=%3*\ [%{getcwd()}]     " current dir

" set statusline +=%1*\ %n\ %*            " buffer number
set statusline +=%5*\ %{&ff}%*            " file format
set statusline +=%3*\ %y%*                " file type
set statusline +=%2*%m%*                " modified flag
set statusline +=%1*%=%5l%*             " current line
set statusline +=%2*/%L%*               " total lines
set statusline +=%1*%4v\ %*             " virtual column number
set statusline +=%2*0x%04B\ %*          " character under cursor
" }}}
" indentation {{{2
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab
set smarttab
set tw=0
set nowrap

set autoindent "Auto indent
set smartindent "Smart indet

" auto check python file indent {{{3
" [ref](http://vim.wikia.com/wiki/Set_indent_parameters_for_Python_files)
" Set options if using spaces for indents (default).
function PySpacesCfg()
    set expandtab
    set tabstop=4
    set softtabstop=4
    set shiftwidth=4
endfunction

" Set options if using tabs for indents.
function PyTabsCfg()
    set noexpandtab
    set tabstop=4
    set softtabstop=4
    set shiftwidth=4
endfunction

" Return 1 if using tabs for indents, or 0 otherwise.
function PyIsTabIndent()
    let lnum = 1
    let got_cols = 0  " 1 if previous lines ended with columns
    while lnum <= 100
        let line = getline(lnum)
        let lnum = lnum + 1
        if got_cols == 1
            if line =~ "^\t\t"  " two tabs to prevent false positives
                return 1
            endif
        endif
        if line =~ ":\s*$"
            let got_cols = 1
        else
            let got_cols = 0
        endif
    endwhile
    return 0
endfunction

" Check current buffer and configure for tab or space indents.
function PyIndentAutoCfg()
    if PyIsTabIndent()
        call PyTabsCfg()
    else
        call PySpacesCfg()
    endif
endfunction

" auto check on py file
au BufEnter *.py call PyIndentAutoCfg()

" }}}
 " }}}
" }}}
" util {{{
" move line up and down {{{
nnoremap <A-j> :m+<CR>==
nnoremap <A-k> :m-2<CR>==
inoremap <A-j> <Esc>:m+<CR>==gi
inoremap <A-k> <Esc>:m-2<CR>==gi
vnoremap <A-j> :m'>+<CR>gv=gv
vnoremap <A-k> :m-2<CR>gv=gv
" }}}
" window and tab operation {{{
" Smart way to move btw. window
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

map <C-A>j  <C-W>j
map <C-A>k <C-W>k
map <C-A>h <C-W>h
map <C-A>l <C-W>l

" Tab configuration
map <leader>tn :tabnew %<cr>
map <leader>tc :tabclose<cr>
" }}}
" map for plugins {{{
" GundoToggle
nnoremap <leader>gu :GundoToggle<cr>

" mark browser
nnoremap <silent> <leader>mb :MarksBrowser<cr>

" change .h and .cpp
inoremap <silent> <F4> :A<CR>
nnoremap <silent> <F4> :A<CR>

" yank ring
nnoremap <leader>yr :YRGetElem<cr>

" vim-shell
nnoremap <F11> :Fullscreen<cr>
nnoremap <leader>ll :Open<cr>

" txt browser
nnoremap <leader>g :TGoto<cr>
au BufRead,BufNewFile *.txt let  Tlist_Sort_Type = "order" "make the tlist type to order when txt fileformat"

" set md as markdown file
au BufRead,BufNewFile,BufEnter *.md set ft=markdown

" autoformat option for source files
" nnoremap <leader>fo :Autoformat<cr>

" tComment extra mappings:
" yank visual before toggle comment
vmap gy ygvgc
" yank and past visual before toggle comment
vmap gyy ygvgc'>gp'.
" yank line before toggle comment
nmap gy yygcc
" yank and paste line before toggle comment and remember position
" it works both in normal and insert mode
" Use :t-1 instead of yyP to preserve registers
nmap gyy mz:t-1<cr>gCc`zmz
imap gyy <esc>:t-1<cr>gCcgi
" And one more mapping for consistency: gcc toggle comment line but gc toggle
" comment visual, so let's make it more consistent:
vmap gcc gc

" nerd tree
nnoremap <leader>t :NERDTree<CR>
nnoremap <leader>tf :NERDTreeFind<CR>

" doxygen
nnoremap <F3>a :DoxAuthor
nnoremap <F3>f :Dox
nnoremap <F3>b :DoxBlock
nnoremap <F3>c A<tab>/**< */<Left><Left>

" for surround for markdown code, ys whole word with `, and then goto end of the word
nmap gs ysiw`E
nmap gS ysiW`E
"}}}
" others {{{2

" total definition as <esc>
imap jj <esc>

" window operation
nnoremap <leader>v :vsplit<cr>
nnoremap <leader>s :split<cr>
" nmap <leader>o :ZoomWin<cr>

" force operation
nnoremap <leader>w :w! <cr>
nnoremap <leader>q :q!<cr>

" normal mode operation for modify
nnoremap <space> i<space><esc>
nnoremap <cr> A<cr><esc>
nnoremap <bs> x<esc>

" get to the first word and last word
inoremap <c-a> <esc>^i
inoremap <c-e> <esc>$a

" build ctags
map <silent> <leader>ct :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

" 连续的进行visual模式移动
vnoremap < <gv
vnoremap > >gv

" change word case
inoremap <leader>u <esc>gUiwea
nnoremap <leader>u <esc>gUiwe

" easy way to use surrounder
imap <leader>c" <esc>ysiW"f"a
nmap <leader>c" <esc>ysiW"f"

imap <leader>c( <esc>ysiWbf)a
nmap <leader>c( <esc>ysiWbf)

imap <leader>c{ <esc>ysiWBf}a
nmap <leader>c{ <esc>ysiWBf}

" very useful for markdown writing
imap <D-0> <esc>ysiW`f`a
nmap <D-0> <esc>ysiW`f`

" easy way to set filetype as markdown
nnoremap <leader>md :set ft=markdown<cr>

" Switch To Current Dir
map <leader>cd :cd %:p:h<cr>

" open file into vertical window
map <F8> :vertical wincmd f<CR>

" easy for markdown header
inoremap <leader>8 <esc>80i=<esc>o<enter>

" [search current word under current directory](http://vim.wikia.com/wiki/Find_in_files_within_Vim?cb=439)
map <F4> :execute "vimgrep /" . expand("<cword>") . "/gj **" <Bar> cw<CR>

let $SELFRC = $HOME.'/.self.vimrc.impl'
if filereadable($SELFRC)
    source $SELFRC
endif

" }}}
" cmake config {{{2
"<buffer> means just take affect in this buffer file
"<silent> means don't put the command info
"<unique> means in later command never changes this key binding
"autocmd FileType cmake nmap <buffer> <silent> <unique> K <Plug>CMakeCompleteHelp
au BufEnter *.cmake,CMakeLists.txt setf cmake
au BufRead,BufNewFile *.cmake,CMakeLists.txt,*.cmake.in runtime! indent/cmake.vim
au BufRead,BufNewFile *.cmake,CMakeLists.txt,*.cmake.in setf cmake
au BufRead,BufNewFile *.ctest,*.ctest.in setf cmake
au FileType cmake set omnifunc=cmakecomplete#Complete
"}}}
" quick fix {{{2
map <leader>cc :botright cope<cr>
map <leader>n :cn<cr>
map <leader>p :cp<cr>
nnoremap <leader>e :ccl<cr>
" }}}
" automaic hightlight line over specifc width "{{{2
" augroup vimrc_autocmds
"   autocmd BufEnter * highlight OverLength ctermbg=darkgrey guibg=#592929
"   autocmd BufEnter * match OverLength /\%100v.*/
" augroup END
"}}}2
" add colum indicator "{{{2
"if exists('+colorcolumn')
    "set colorcolumn=80
"else
    "au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
"endif
"}}}2
" add python header info {{{
" let g:python_author = 'whiledoing'
" let g:python_email = 'lovingwhile@gmail.com'

" function! InsertPythonComment()
    " return
    " exe 'normal'.1.'G'
    " let line = getline('.')
    " if line =~ '^#!.*$' || line =~ '^#.*coding:.*$'
        " return
    " endif
    " normal O
    " call setline('.', '#!/usr/bin/env python')
    " normal o
    " call setline('.', '# -*- coding:utf-8 -*-')
    " normal o
    " call setline('.', '"""')
    " normal o
    " call setline('.', 'Author   :   '.g:python_author)
    " normal o
    " call setline('.', 'E-mail   :   '.g:python_email)
    " normal o
    " call setline('.', 'Create   :   '.strftime("%y/%m/%d %H:%M:%S"))
    " normal o
    " call setline('.', 'Modified :   '.strftime("%y/%m/%d %H:%M:%S"))
    " normal o
    " call setline('.', 'Desc     :   ')
    " normal o
    " call setline('.', '"""')
    " normal o
    " call cursor(8, 17)
" endfunction
" function! InsertCommentWhenOpen()
    " if a:lastline == 1 && !getline('.')
        " call InsertPythonComment()
    " end
" endfunc

" " function! DateInsert()
" " call cursor(7,1)
" " if search('Modified') != 0
	" " let line = line('.')
	" " call setline(line, 'Modified :   '.strftime("%y/%m/%d %H:%M:%S"))
" " endif
" " endfunction

" au FileType python :%call InsertCommentWhenOpen()
" au FileType python map <F4> :call InsertPythonComment()<cr>
" autocmd FileWritePre,BufWritePre *.py ks|call DateInsert()|'s

" 定义函数AutoSetFileHead，自动插入文件头
autocmd BufNewFile *.sh,*.py exec ":call AutoSetFileHead()"
function! AutoSetFileHead()
    "如果文件类型为.sh文件
    if &filetype == 'sh'
        call setline(1, "\#!/bin/bash")
    endif

    "如果文件类型为python
    if &filetype == 'python'
        call setline(1, "\#!/usr/bin/env python")
        call append(1, "\# encoding: utf-8")
    endif

    normal G
    normal o
    normal o
endfunc

" }}}
" toggle paste mode {{{
" [ref](http://vim.wikia.com/wiki/Toggle_auto-indenting_for_code_paste)
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode
" }}}
" }}}
" plugin {{{
" plugin list {{{2
" [vim-plugin manager](https://github.com/junegunn/vim-plug)
call plug#begin('~/.vim/plugged')

" @note must use single quote
" html and css zen encoding
Plug 'mattn/emmet-vim'

" auto get the file encoding
Plug 'FencView.vim'

" auto generate dir when using :w foo/a/test.txt"
Plug 'auto_mkdir'

" better tag list plugin
Plug 'majutsushi/tagbar'

" easy move
Plug 'Lokaltog/vim-easymotion'

" dash search
Plug 'rizzatti/dash.vim'

" syntax check
Plug 'scrooloose/syntastic'

" omni auto complete
Plug 'Valloric/YouCompleteMe', {'do': 'python install.py --tern-completer'}

" distraction-free writing in vim
Plug 'junegunn/goyo.vim'

" hyperfocus-writing in vim
Plug 'junegunn/limelight.vim'

" search file
Plug 'ctrlpvim/ctrlp.vim'

" surround
Plug 'tpope/vim-surround'

" add some common key short
Plug 'tpope/vim-unimpaired'

" help to make commenter
Plug 'scrooloose/nerdcommenter'

" the nerd file exploreer
Plug 'scrooloose/nerdtree'

" fucking great start-up sceen
Plug 'mhinz/vim-startify'

" run tmux in vim
Plug 'benmills/vimux'

" manager themes
Plug 'reedes/vim-thematic'

" scheme
Plug 'altercation/vim-colors-solarized'
Plug 'w0ng/vim-hybrid'
Plug 'reedes/vim-colors-pencil'

" markdown editing
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'

" git gutter
" Plug 'airblade/vim-gitgutter'

" git fugitive
" Plug 'tpope/vim-fugitive'

" vimim for chinese input
" Plug 'vim-scripts/VimIM'

" auto spacing
" Plug 'hotoo/pangu.vim'

" powerline
" Plug 'vim-airline/vim-airline'

" indentline
" Plug 'Yggdroot/indentLine'

" auto check tab/space
" Plug 'tpope/vim-sleuth'

" draw it
" Plug 'vim-scripts/DrawIt'

" add the foldmarker based outliner
" Plug 'VOoM'

" enhance syntax for python
" Plug 'python.vim--Vasiliev'

" automatically add bracket
" Plug 'Raimondi/delimitMate'

" switch tmux and vim seamlessly
" Plug 'christoomey/vim-tmux-navigator'

" Add plugins to &runtimepath
call plug#end()
" }}}
" plugin settings {{{2
" NerdComment {{{3
" add space after comment
let NERDSpaceDelims = 1
" }}}
" tagbar {{{3
let g:tagbar_left = 1
let g:tagbar_width = 40
let g:tagbar_autofocus = 1
let g:tagbar_autoshowtag = 1

noremap <leader>tb :Tagbar<cr>
" }}}
" Unite {{{3
" start insert when open
let g:unite_enable_start_insert=1

" delayed time before showing the narrowed options
let g:unite_update_time=1

" enable yank_file
let g:unite_source_history_yank_file=1
let g:unite_source_find_max_candidates=500
let g:unite_source_file_mru_limit=500
let g:unite_enable_short_source_names = 1

"set the splite dircection
let g:unite_split_rule='topleft'

"  }}}
" VOom {{{3
let g:voom_tree_width=40
let g:voom_return_key='<Return>'
let g:voom_tab_key='<Tab>'
"}}}
 " nerdtree  {{{3
let g:netrw_winsize = 40
let NERDTreeMapOpenVSplit = "v"
let NERDTreeMapOpenSplit = "s"
let NERDTreeShowBookmarks = 1
let NERDTreeShowBookmarks = 1
let NERDTreeWinPos = "left"
let NERDTreeWinSize = 30
let NERDTreeQuitOnOpen =  0

" nerdtree filter
let NERDTreeIgnore=['\.pyc$']

" }}}
" yank_ring {{{3
let g:yankring_window_height=20
let g:yankring_min_element_length = 2
let g:yankring_max_history=500
" }}}
" fencview {{{3
let g:fencview_autodetect=0
let g:fencview_auto_patterns='*.txt,*.htm{l\=},*.ini'
"}}}
" session.vim {{{3
" save the session files
let g:session_directory='~/sessions'

"default action when start vim 'prompt' 'yes' 'no'
let g:session_autoload='no'

"default action when close vim when a session has been specific
let g:session_autosave='no'

"default load the last session file instead of default session
let g:session_default_to_last=1

"add SessionSave etc alias as SaveSession
let g:session_command_aliases=1
"}}}
" python-mode"{{{3
let g:pymode_lint = 1

" not trim for corp
let g:pymode_trim_whitespaces = 0

" enable python folding
let g:pymode_folding = 1

" enable python motion (C means Class, M means function)
let g:pymode_motion = 1

" check lint on every save
let g:pymode_lint_on_write = 1

" check lint on fly
let g:pymode_lint_on_fly = 0

" lint checker
let g:pymode_lint_checkers = ['pylint', 'pep8', 'pyflakes']

" Skip errors and warnings
" E.g. 'E501,W002', 'E2,W' (Skip all Warnings and Errors startswith E2) and etc
" E501 : too long line over 79 character
" E225 : missing space between operator
" W404 : using from xx import *
let g:pymode_lint_ignore = "E501,E225,W404"

" disable breakpoint ability with `<leader>b`
let g:pymode_breakpoint_key = 0

" disable virtual env
let g:pymode_virtualenv = 0

" jump on the first error
let g:pymode_lint_jump = 1

" show the lint window
let g:pymode_lint_cwindow = 0

" py-rope for code extract
let g:pymode_rope_extract_method_bind = '<C-c>rm'
let g:pymode_rope_extract_variable_bind = '<C-c>rl'

let g:pymode_rope = 0
" }}}
" ycm {{{3
" 自动补全配置
" 让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
set completeopt=longest,menu

"离开插入模式后自动关闭预览窗口
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

"回车即选中当前项
inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"

"上下左右键的行为 会显示其他信息
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"

"youcompleteme  默认tab  s-tab 和自动补全冲突
"let g:ycm_key_list_select_completion=['<c-n>']
"let g:ycm_key_list_select_completion = ['<Down>']
"let g:ycm_key_list_previous_completion=['<c-p>']
"let g:ycm_key_list_previous_completion = ['<Up>']

"关闭加载.ycm_extra_conf.py提示
let g:ycm_confirm_extra_conf=0

" 开启 YCM 基于标签引擎
let g:ycm_collect_identifiers_from_tags_files=1

" 从第3个键入字符就开始罗列匹配项
let g:ycm_min_num_of_chars_for_completion=3

" 禁止缓存匹配项,每次都重新生成匹配项
let g:ycm_cache_omnifunc=0

"开启语义补全
let g:ycm_seed_identifiers_with_syntax = 1

"注释输入中也能补全
let g:ycm_complete_in_comments = 1

"在字符串输入中也能补全
let g:ycm_complete_in_strings = 1

"注释和字符串中的文字也会被收入补全
let g:ycm_collect_identifiers_from_comments_and_strings = 0

nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>gg :YcmCompleter GoTo<CR>

" let g:ycm_semantic_triggers = {
   " \   'css': [ 're!^\s{4}', 're!:\s+' ],
   " \ }

map <C-]> :YcmCompleter GoToImprecise<CR>
" }}}
" CtrlP {{{3
let g:ctrlp_map='<Leader>f'
let g:ctrlp_cmd='CtrlP'

nmap <silent> <leader>b :CtrlPBuffer<cr>
nmap <silent> <leader>. :CtrlPMRUFiles<cr>

let g:ctrlp_max_depth=5
let g:ctrlp_max_files=500
let g:ctrlp_match_window_bottom = 1

" `'r'` - the nearest ancestor that contains one of these directories or files: `.git` `.hg` `.svn` `.bzr` `_darcs`
" `'a'` - like c, but only if the current working directory outside of CtrlP is not a direct ancestor of the directory of the current file.
let g:ctrlp_working_path_mode = 'r'

set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc     " MacOSX/Linux

let g:ctrlp_custom_ignore = {
\ 'dir':  '\v[\/]\.(git|hg|svn)$',
\ 'file': '\v\.(exe|so|dll|pyc)$',
\ 'link': 'some_bad_symbolic_links',
\ }

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  " if use ag, you need to specific ignore manaully
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g "" --ignore="*.pyc"'

  " still use cache
  let g:ctrlp_use_caching = 1
endif

" bind K to grep word under cursor
nnoremap K :grep "\b<C-R><C-W>\b"<CR>:cw<CR>:set modifiable<CR>

" }}}
" easy motion {{{3
" let g:EasyMotion_do_mapping = 0 " Disable default mappings

" Bi-directional find motion
" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
nmap s <Plug>(easymotion-s2)

" Turn on case insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)

" keep cursor column when JK motion
let g:EasyMotion_startofline = 0

" Gif config
" map  / <Plug>(easymotion-sn)
" omap / <Plug>(easymotion-tn)

" These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.
" Without these mappings, `n` & `N` works fine. (These mappings just provide
" different highlight method and have some other features )
" map  n <Plug>(easymotion-next)
" map  N <Plug>(easymotion-prev)

silent! call repeat#set("\<Plug>(easymotion-repeat)", 1)

" }}}
" syntastic {{{3
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

" let g:syntastic_python_checkers = ["python", "pyflakes", "pylint"]
" let g:syntastic_python_checkers = ["python", "pylint"]
let g:syntastic_python_checkers = ["pylint"]

let g:syntastic_mode_map = {
    \ "mode": "active",
    \ "active_filetypes": ["ruby", "php"],
    \ "passive_filetypes": ["python"]
\}
" }}}
" startify {{{
let g:startify_custom_footer =
      \ ['', "   努力是为了不想让世界交给那些我鄙视的人！", '']

function! s:filter_header(lines) abort
    let longest_line   = max(map(copy(a:lines), 'len(v:val)'))
    let centered_lines = map(copy(a:lines),
        \ 'repeat(" ", (&columns / 2) - (longest_line / 2)) . v:val')
    return centered_lines
endfunction

let g:startify_custom_header = s:filter_header(
    \ map(split(system('cowthink -f default "Now is better than never. Although never is often better than *right* now."' ), '\n'), '"   ". v:val') + ['']
\)

let g:startify_list_order = [
        \ ['   These are my sessions:'],
        \ 'sessions',
        \ ['   My most recently', '   used files'],
        \ 'files',
        \ ['   My most recently used files in the current directory:'],
        \ 'dir',
        \ ['   These are my bookmarks:'],
        \ 'bookmarks',
        \ ]
let g:startify_bookmarks = ['~/.vimrc', '~/.zshrc', '~/.self.bashrc.impl', '~/work/proj/hexo-blog']
" }}}
" emmet {{{3
let g:user_emmet_leader_key = '<C-y>'
" }}}
" vimux {{{3
"
" Use exising pane or window (not used by vim) if found instead of running split-window.
let VimuxUseNearest = 1
let g:VimuxHeight = "20"
let g:VimuxPromptString = "CommandForTux : "
let g:VimuxRunnerType = "pane"

" Run the current file with rspec
autocmd FileType python map <buffer> <Leader>rr :call VimuxRunCommandInDir("clear; python", 1)<CR>

" for project dev
map <Leader>rs :call VimuxRunCommand("clear; sreload")<CR>
map <Leader>ru :call VimuxRunCommand("clear; sprepare")<CR>
map <Leader>rc :call VimuxRunCommand("clear; skill; srun")<CR>

" Prompt for a command to run
map <Leader>rp :VimuxPromptCommand<CR>

" Run last command executed by VimuxRunCommand
map <Leader>rl :VimuxRunLastCommand<CR>

" Inspect runner pane
map <Leader>ri :VimuxInspectRunner<CR>

" Close vim tmux runner opened by VimuxRunCommand
map <Leader>rq :VimuxCloseRunner<CR>

" Interrupt any command running in the runner pane
map <Leader>rx :VimuxInterruptRunner<CR>

" Zoom the runner pane (use <bind-key> z to restore runner pane)
map <Leader>rz :call VimuxZoomRunner()<CR>

map <Leader>ro :call VimuxOpenPane()<CR>

" Push the repository of the currently opened file, 0 means not add file into the command line
nnoremap <leader>gp :call VimuxRunCommandInDir("git push", 0)<CR>
" }}}
" vim-airline {{{3
" let g:airline#extensions#tabline#enabled = 1
" let g:airline#extensions#syntastic#enabled = 1
" let g:airline#extensions#tagbar#enabled = 1
" let g:airline_powerline_fonts=1

" if !exists('g:airline_symbols')
    " let g:airline_symbols = {}
" endif

" " unicode symbols
" let g:airline_left_sep = '»'
" let g:airline_left_sep = '▶'
" let g:airline_right_sep = '«'
" let g:airline_right_sep = '◀'
" let g:airline_symbols.crypt = '🔒'
" let g:airline_symbols.linenr = '␊'
" let g:airline_symbols.linenr = '␤'
" let g:airline_symbols.linenr = '¶'
" let g:airline_symbols.branch = '⎇'
" let g:airline_symbols.paste = 'ρ'
" let g:airline_symbols.paste = 'Þ'
" let g:airline_symbols.paste = '∥'
" let g:airline_symbols.whitespace = 'Ξ'

" powerline symbols
" let g:airline_left_sep = ''
" let g:airline_left_alt_sep = ''
" let g:airline_right_sep = ''
" let g:airline_right_alt_sep = ''
" let g:airline_symbols.branch = ''
" let g:airline_symbols.readonly = ''
" let g:airline_symbols.linenr = ''
" }}}
" vim-themetic {{{3
let g:thematic#defaults = {
\   'fullscreen-background-color-fix' : 1,
\ }

let g:thematic#themes = {
\   'delek-light' : {
\       'colorscheme': 'delek',
\       'background': 'light',
\       'airline-theme': 'bubblegum',
\   },
\   'solarized-light' : {
\       'colorscheme': 'solarized',
\       'background': 'light',
\       'airline-theme': 'light',
\   },
\   'solarized-dark' : {
\       'colorscheme': 'solarized',
\       'background': 'dark',
\       'airline-theme': 'behelit',
\   },
\   'hybrid-dark' : {
\       'colorscheme': 'hybrid',
\       'background': 'dark',
\       'airline-theme': 'behelit',
\   },
\   'pencil-dark' : {
\       'colorscheme': 'pencil',
\       'background': 'dark',
\       'airline-theme': 'pencil',
\   },
\   'pencil-light' : {
\       'colorscheme': 'pencil',
\       'background': 'light',
\       'airline-theme': 'pencil',
\   },
\   'tomorrow-night-eighties-dark' : {
\       'colorscheme': 'Tomorrow-Night-Eighties',
\       'background': 'dark',
\       'airline-theme': 'behelit',
\   }
\ }

" only install theme settings on start up, so hook it only on gui version
" in console, use default config
if has("gui_running")
    let g:thematic#theme_name = 'tomorrow-night-eighties-dark'
endif
"}}}
" vim-gitgutter {{{3
" change update time for gitgutter take effect
set updatetime=250

nmap <Leader>ga <Plug>GitGutterStageHunk
nmap <Leader>gu <Plug>GitGutterRevertHunk
nmap <Leader>gv <Plug>GitGutterPreviewHunk

" use colorscheme default sign colum config [ref](https://github.com/airblade/vim-gitgutter/issues/164)
let g:gitgutter_override_sign_column_highlight = 0
hi clear SignColumn

let g:gitgutter_enabled = 1
let g:gitgutter_signs = 1
let g:gitgutter_highlight_lines = 0
" }}}
" pangu {{{
" auto spacing for following ext
" autocmd BufWritePre *.markdown,*.md,*.text,*.txt,*.wiki,*.cnx call PanGuSpacing()
" }}}
" indentLine {{{
let g:indentLine_char='¦'

" toggle space
let g:indentLine_leadingSpaceEnabled=1
let g:indentLine_leadingSpaceChar = '·'
nmap <leader>tl :LeadingSpaceToggle<cr>

" with tab show as |--- characters
set list
set listchars=tab:\|\ "@note space here
" }}}
" limelight {{{3
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!
let goyo_width=120
" }}}
"}}}
" }}}
