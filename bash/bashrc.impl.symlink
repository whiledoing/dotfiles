#!/bin/bash

# user specific bashrc config
#########################################################################################################################

# make thefuck alias workable
if [[ $(command -v thefuck) ]]; then
    eval "$(thefuck --alias)"
fi

# use fzf for search
# use fd for search files if exists
if [[ $(command -v fd) ]]; then
    export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git --color=always'
    export FZF_COMMAND_FOR_DIR='fd --type d --hidden --follow --exclude .git --color=always'
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

    # Preview file content using bat (https://github.com/sharkdp/bat)
    export FZF_CTRL_T_OPTS=" --walker-skip .git,node_modules,target --preview 'bat -n --color=always {}' --bind 'ctrl-/:change-preview-window(down|hidden|)'"

    # Print tree structure in the preview window
    export FZF_ALT_C_OPTS=" --walker-skip .git,node_modules,target --preview 'tree -C {}'"

    # copyed from https://github.com/junegunn/fzf
    # ctrl-d search dir only
    # ctrl-f search files only
    # ctrl-y copy
    # ctrl-o open with vscode
    export FZF_DEFAULT_OPTS="--ansi --bind='ctrl-o:execute(code {})+abort,ctrl-e:execute(vim {})+abort,ctrl-y:execute-silent(echo {} | pbcopy)+abort,ctrl-d:reload($FZF_COMMAND_FOR_DIR),ctrl-f:reload($FZF_DEFAULT_COMMAND)'"
fi
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/opt/local/google-cloud-sdk/path.zsh.inc' ]; then . '/opt/local/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/opt/local/google-cloud-sdk/completion.zsh.inc' ]; then . '/opt/local/google-cloud-sdk/completion.zsh.inc'; fi

# for go proxy: https://github.com/goproxy/goproxy.cn
export GO111MODULE=auto
export GOPROXY=https://goproxy.cn
export PATH="$HOME/go/bin:$PATH"

# direnv https://direnv.net/docs/hook.html
if [[ $(command -v direnv) ]]; then
    if [[ -n "$ZSH_VERSION" ]]; then
        eval "$(direnv hook zsh)"
    elif [[ -n "$BASH_VERSION" ]]; then
        eval "$(direnv hook bash)"
    fi
fi

# https://krew.sigs.k8s.io/docs/user-guide/setup/install/
if [[ -d "$HOME/.krew" ]]; then
    export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
fi

# powerline-go
# source xmake profile
[[ -f "$HOME/.xmake/profile" ]] && source "$HOME/.xmake/profile"

# enable hugo suggesion
if [[ $(command -v hugo) ]]; then
    if [[ ! -f "/usr/local/share/zsh/site-functions/_hugo" ]]; then
        hugo completion zsh >/usr/local/share/zsh/site-functions/_hugo
    fi
fi

if [[ $(command -v difft) ]]; then
    if [[ $(git config --global diff.external) != "difft" ]]; then
        git config --global diff.external difft
    fi
fi

# ssh-tunnel
# http://notepad2.blogspot.com/2012/11/run-ssh-tunnel-in-background.html
ssh_tunnel() {
    ssh -fN -L "$1" "$2" -M -S "/tmp/ssh-tunnel-$2.sock"
}

ssh_tunnel_check() {
    ssh -S "/tmp/ssh-tunnel-$1.sock" -O check "$1"
}

ssh_tunnel_exit() {
    ssh -S "/tmp/ssh-tunnel-$1.sock" -O exit "$1"
}

ssh_reverse_tunnel() {
    # http://notepad2.blogspot.com/2012/11/run-ssh-tunnel-in-background.html
    ssh -fN -R "$1" "$2" -M -S "/tmp/ssh-reverse-tunnel-$2.sock"
}

ssh_reverse_tunnel_check() {
    ssh -S "/tmp/ssh-reverse-tunnel-$1.sock" -O check "$1"
}

ssh_reverse_tunnel_exit() {
    ssh -S "/tmp/ssh-reverse-tunnel-$1.sock" -O exit "$1"
}

# volc command line
if [[ -r "$HOME/.volc/.profile" ]]; then
    source ~/.volc/.profile #[volc installer]
    export PATH="$HOME/.local/bin":$PATH
fi

# use multiple kubeconfig files
# refs: https://woile.dev/posts/multiple-configurations-in-kubernetes/
if [[ $(command -v kubectl) ]]; then
    set_kubeconfig() {
        # init config-files dir
        [[ ! -d "$HOME/.kube/config-files" ]] && mkdir -p "$HOME/.kube/config-files"

        # no files
        [[ -z "$(ls $HOME/.kube/config-files)" ]] && return

        # search all yaml files
        for entry in "$HOME/.kube/config-files"/*; do
            if [[ -f "$entry" ]] && [[ $entry != *"skip"* ]]; then
                kubeconfigs="$kubeconfigs:$entry"
            fi
        done

        # init KUBECONFIG env
        DEFAULT_KUBECONFIG_FILE="$HOME/.kube/config"
        [[ -f ${DEFAULT_KUBECONFIG_FILE} ]] && export KUBECONFIG=${DEFAULT_KUBECONFIG_FILE}

        # clean first colons and append
        kubeconfigs=${kubeconfigs#":"}
        export KUBECONFIG="${KUBECONFIG}:${kubeconfigs}"
    }

    # Execute the function
    set_kubeconfig

    # get zsh complete kubectl
    source <(kubectl completion zsh)

    # use kubecolor for color output
    if [[ $(command -v kubecolor) ]]; then
        alias kubectl=kubecolor
        # make completion work with kubecolor
        compdef kubecolor=kubectl
    fi
fi

eph() {
    ark-cli endpoint api chat "$1" hello "${@:2}"
}

epv() {
    ark-cli endpoint view --enable-scheduler-view "$1" "${@:2}" | less
}

eps() {
    ark-cli service view --enable-scheduler-view "$1" "${@:2}" | less
}

export HF_ENDPOINT=https://hf-mirror.com

# llvm
# if [[ -d "/opt/homebrew/opt/llvm/" ]]; then
#     export PATH="/opt/homebrew/opt/llvm/bin:$PATH"
#     export LDFLAGS="-L/opt/homebrew/opt/llvm/lib"
#     export CPPFLAGS="-I/opt/homebrew/opt/llvm/include"
# fi

# for apache spark
# if which java > /dev/null; then export JAVA_HOME=$(/usr/libexec/java_home); fi
# export JAVA_HOME="/Library/Java/Home"

# for pyspark
# if which pyspark > /dev/null; then
#   export SPARK_HOME="/usr/local/Cellar/apache-spark/2.3.0/libexec"
#   export PYTHONPATH=$SPARK_HOME/python:$PYTHONPATH
#   export PYTHONPATH=$SPARK_HOME/python/lib/py4j-0.10.6-src.zip:$PYTHONPATH
# fi

# pyspark with use jupyter instead of interactive shell
# export PYSPARK_DRIVER_PYTHON=jupyter pyspark
# export PYSPARK_DRIVER_PYTHON_OPTS=notebook

# for scala path in IntelliJ
# export SCALA_HOME="/usr/local/opt/scala/idea"

# disable ctrl-d exit shell [ref](http://superuser.com/questions/479600/how-can-i-prevent-tmux-exiting-with-ctrl-d)
# set -o ignoreeof

# some segments e.g. cwd and cvs_branch needs to find the current working
# directory of the active pane. To achieve this we let tmux save the path each
# time the shell prompt is displayed. Put the line below in your ~/.bashrc or
# where you define you PS1 variable. zsh users can put it in e.g. ~/.zshrc and
# may change PS1 to PROMPT (but that's not necessary).
# [refs](https://github.com/erikw/tmux-powerline)
# PS1="$PS1"'$([ -n "$TMUX" ] && tmux setenv TMUXPWD_$(tmux display -p "#D" | tr -d %) "$PWD")'

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# using vim biding in conf
# [set vi key binding in zsh](http://stackoverflow.com/questions/6839006/map-jj-to-esc-in-inputrc-readline)
# bindkey -v
# set bell-style none

# using jj as esc
# bindkey -M viins 'jj' vi-cmd-mode

# using ctrl-r in vi mode
# bindkey '^R' history-incremental-search-backward

# bindkey 'gg' beginning-of-history
# bindkey 'G' end-of-history

# bindkey '\C-w' backward-kill-word
# bindkey '\C-p' history-search-backward
# bindkey '\C-n' history-search-forward
# bindkey -M vicmd '|' beginning-of-line

# set virtualwrapper (https://github.com/dccrazyboy/pyeco/blob/master/pyeco.rst)
# if [ `id -u` != '0' ] && [ -f '/usr/local/bin/virtualenvwrapper.sh' ]; then
#   export VIRTUALENV_USE_DISTRIBUTE=1        # <-- Always use pip/distribute
#   export WORKON_HOME=$HOME/.virtualenvs       # <-- Where all virtualenvs will be stored
#   source /usr/local/bin/virtualenvwrapper.sh
#   export PIP_VIRTUALENV_BASE=$WORKON_HOME
#   export PIP_RESPECT_VIRTUALENV=true
# fi

# auto autoenv
# [ -f /usr/local/opt/autoenv/activate.sh ] && source /usr/local/opt/autoenv/activate.sh
