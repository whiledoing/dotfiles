# user specific bashrc config

# add Homebrew's sbin path
export PATH="/usr/local/sbin:$PATH"

# make thefuck alias workable
if [[ `command -v thefuck` ]]; then
    eval $(thefuck --alias)
fi

# use fzf for search
# use fd for search files if exists
if [[ `command -v fd` ]]; then
    export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git --color=always'
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
    export FZF_DEFAULT_OPTS="--ansi"
fi
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/opt/local/google-cloud-sdk/path.zsh.inc' ]; then . '/opt/local/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/opt/local/google-cloud-sdk/completion.zsh.inc' ]; then . '/opt/local/google-cloud-sdk/completion.zsh.inc'; fi

# autojump
[ -f /usr/local/etc/profile.d/autojump.sh ] && . /usr/local/etc/profile.d/autojump.sh

# for go proxy: https://github.com/goproxy/goproxy.cn
export GO111MODULE=auto
export GOPROXY=https://goproxy.cn
export PATH="$HOME/go/bin:$PATH"

# hub https://github.com/github/hub
if [[ `command -v hub` ]]; then
    eval "$(hub alias -s)"
fi

# direnv https://direnv.net/docs/hook.html
if [[ `command -v direnv` ]]; then
    if [[ -n "$ZSH_VERSION" ]]; then
        eval "$(direnv hook zsh)"
    elif [[ -n "$BASH_VERSION" ]]; then
        eval "$(direnv hook bash)"
    fi
fi

# for cuda
# export PATH=$PATH:/Developer/NVIDIA/CUDA-9.1/bin
# export DYLD_LIBRARY_PATH=/Developer/NVIDIA/CUDA-9.1/lib

# for opencv
# export LDFLAGS=-L/usr/local/opt/opencv@2/lib
# export CPPFLAGS=-I/usr/local/opt/opencv@2/include
# export PKG_CONFIG_PATH=/usr/local/opt/opencv@2/lib/pkgconfig

# for apache spark
# if which java > /dev/null; then export JAVA_HOME=$(/usr/libexec/java_home); fi
# export JAVA_HOME="/Library/Java/Home"

# for pyspark
# if which pyspark > /dev/null; then
#   export SPARK_HOME="/usr/local/Cellar/apache-spark/2.3.0/libexec"
#   export PYTHONPATH=$SPARK_HOME/python:$PYTHONPATH
#   export PYTHONPATH=$SPARK_HOME/python/lib/py4j-0.10.6-src.zip:$PYTHONPATH
# fi

# pyspark with use jupyter instead of interactive shell
# export PYSPARK_DRIVER_PYTHON=jupyter pyspark
# export PYSPARK_DRIVER_PYTHON_OPTS=notebook

# for scala path in IntelliJ
# export SCALA_HOME="/usr/local/opt/scala/idea"

# disable ctrl-d exit shell [ref](http://superuser.com/questions/479600/how-can-i-prevent-tmux-exiting-with-ctrl-d)
# set -o ignoreeof

# some segments e.g. cwd and cvs_branch needs to find the current working
# directory of the active pane. To achieve this we let tmux save the path each
# time the shell prompt is displayed. Put the line below in your ~/.bashrc or
# where you define you PS1 variable. zsh users can put it in e.g. ~/.zshrc and
# may change PS1 to PROMPT (but that's not necessary).
# [refs](https://github.com/erikw/tmux-powerline)
# PS1="$PS1"'$([ -n "$TMUX" ] && tmux setenv TMUXPWD_$(tmux display -p "#D" | tr -d %) "$PWD")'

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# using vim biding in conf
# [set vi key binding in zsh](http://stackoverflow.com/questions/6839006/map-jj-to-esc-in-inputrc-readline)
# bindkey -v
# set bell-style none

# using jj as esc
# bindkey -M viins 'jj' vi-cmd-mode

# using ctrl-r in vi mode
# bindkey '^R' history-incremental-search-backward

# bindkey 'gg' beginning-of-history
# bindkey 'G' end-of-history

# bindkey '\C-w' backward-kill-word
# bindkey '\C-p' history-search-backward
# bindkey '\C-n' history-search-forward
# bindkey -M vicmd '|' beginning-of-line

# set virtualwrapper (https://github.com/dccrazyboy/pyeco/blob/master/pyeco.rst)
# if [ `id -u` != '0' ] && [ -f '/usr/local/bin/virtualenvwrapper.sh' ]; then
#   export VIRTUALENV_USE_DISTRIBUTE=1        # <-- Always use pip/distribute
#   export WORKON_HOME=$HOME/.virtualenvs       # <-- Where all virtualenvs will be stored
#   source /usr/local/bin/virtualenvwrapper.sh
#   export PIP_VIRTUALENV_BASE=$WORKON_HOME
#   export PIP_RESPECT_VIRTUALENV=true
# fi

# auto autoenv
# [ -f /usr/local/opt/autoenv/activate.sh ] && source /usr/local/opt/autoenv/activate.sh
